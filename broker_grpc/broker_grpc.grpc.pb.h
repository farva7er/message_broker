// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: broker_grpc.proto
#ifndef GRPC_broker_5fgrpc_2eproto__INCLUDED
#define GRPC_broker_5fgrpc_2eproto__INCLUDED

#include "broker_grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace broker {

class Broker final {
 public:
  static constexpr char const* service_full_name() {
    return "broker.Broker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::broker::BrokerResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>> AsyncCreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::broker::ChannelNames* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>> AsyncGetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>>(AsyncGetChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>> PrepareAsyncGetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>>(PrepareAsyncGetChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status PublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::broker::BrokerResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>> AsyncPublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>>(AsyncPublishMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>> PrepareAsyncPublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>>(PrepareAsyncPublishMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::broker::Channel, ::broker::Message>> Subscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::broker::Channel, ::broker::Message>>(SubscribeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>> AsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>>(AsyncSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>> PrepareAsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>>(PrepareAsyncSubscribeRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::broker::Channel,::broker::Message>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>* AsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::ChannelNames>* PrepareAsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>* AsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::broker::BrokerResult>* PrepareAsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::broker::Channel, ::broker::Message>* SubscribeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>* AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::broker::Channel, ::broker::Message>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::broker::BrokerResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>> AsyncCreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    ::grpc::Status GetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::broker::ChannelNames* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>> AsyncGetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>>(AsyncGetChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>> PrepareAsyncGetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>>(PrepareAsyncGetChannelsRaw(context, request, cq));
    }
    ::grpc::Status PublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::broker::BrokerResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>> AsyncPublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>>(AsyncPublishMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>> PrepareAsyncPublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>>(PrepareAsyncPublishMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::broker::Channel, ::broker::Message>> Subscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::broker::Channel, ::broker::Message>>(SubscribeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>> AsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>>(AsyncSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>> PrepareAsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>>(PrepareAsyncSubscribeRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)>) override;
      void CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, std::function<void(::grpc::Status)>) override;
      void GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)>) override;
      void PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::broker::Channel,::broker::Message>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>* AsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>* PrepareAsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* AsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* PrepareAsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::broker::Channel, ::broker::Message>* SubscribeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>* AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response);
    virtual ::grpc::Status GetChannels(::grpc::ServerContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response);
    virtual ::grpc::Status PublishMessage(::grpc::ServerContext* context, const ::broker::Message* request, ::broker::BrokerResult* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::broker::Channel* request, ::grpc::ServerAsyncResponseWriter< ::broker::BrokerResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChannels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannels(::grpc::ServerContext* context, ::broker::Empty* request, ::grpc::ServerAsyncResponseWriter< ::broker::ChannelNames>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishMessage(::grpc::ServerContext* context, ::broker::Message* request, ::grpc::ServerAsyncResponseWriter< ::broker::BrokerResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::broker::Message, ::broker::Channel>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateChannel<WithAsyncMethod_GetChannels<WithAsyncMethod_PublishMessage<WithAsyncMethod_Subscribe<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateChannel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::broker::Channel, ::broker::BrokerResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response) { return this->CreateChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChannel(
        ::grpc::MessageAllocator< ::broker::Channel, ::broker::BrokerResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::broker::Channel, ::broker::BrokerResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChannels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::broker::Empty, ::broker::ChannelNames>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response) { return this->GetChannels(context, request, response); }));}
    void SetMessageAllocatorFor_GetChannels(
        ::grpc::MessageAllocator< ::broker::Empty, ::broker::ChannelNames>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::broker::Empty, ::broker::ChannelNames>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::broker::Message, ::broker::BrokerResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::broker::Message* request, ::broker::BrokerResult* response) { return this->PublishMessage(context, request, response); }));}
    void SetMessageAllocatorFor_PublishMessage(
        ::grpc::MessageAllocator< ::broker::Message, ::broker::BrokerResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::broker::Message, ::broker::BrokerResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::broker::Channel, ::broker::Message>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Subscribe(context); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::broker::Channel, ::broker::Message>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CreateChannel<WithCallbackMethod_GetChannels<WithCallbackMethod_PublishMessage<WithCallbackMethod_Subscribe<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChannels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChannels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChannels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Subscribe(context); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::broker::Channel, ::broker::BrokerResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::broker::Channel, ::broker::BrokerResult>* streamer) {
                       return this->StreamedCreateChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::broker::Channel* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::broker::Channel,::broker::BrokerResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChannels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::broker::Empty, ::broker::ChannelNames>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::broker::Empty, ::broker::ChannelNames>* streamer) {
                       return this->StreamedGetChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChannels(::grpc::ServerContext* /*context*/, const ::broker::Empty* /*request*/, ::broker::ChannelNames* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::broker::Empty,::broker::ChannelNames>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::broker::Message, ::broker::BrokerResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::broker::Message, ::broker::BrokerResult>* streamer) {
                       return this->StreamedPublishMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishMessage(::grpc::ServerContext* /*context*/, const ::broker::Message* /*request*/, ::broker::BrokerResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::broker::Message,::broker::BrokerResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_GetChannels<WithStreamedUnaryMethod_PublishMessage<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_GetChannels<WithStreamedUnaryMethod_PublishMessage<Service > > > StreamedService;
};

}  // namespace broker


#endif  // GRPC_broker_5fgrpc_2eproto__INCLUDED
