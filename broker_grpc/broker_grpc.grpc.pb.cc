// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: broker_grpc.proto

#include "broker_grpc.pb.h"
#include "broker_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace broker {

static const char* Broker_method_names[] = {
  "/broker.Broker/CreateChannel",
  "/broker.Broker/GetChannels",
  "/broker.Broker/PublishMessage",
  "/broker.Broker/Subscribe",
};

std::unique_ptr< Broker::Stub> Broker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Broker::Stub> stub(new Broker::Stub(channel, options));
  return stub;
}

Broker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateChannel_(Broker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChannels_(Broker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishMessage_(Broker_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(Broker_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Broker::Stub::CreateChannel(::grpc::ClientContext* context, const ::broker::Channel& request, ::broker::BrokerResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::broker::Channel, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChannel_, context, request, response);
}

void Broker::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::broker::Channel, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void Broker::Stub::async::CreateChannel(::grpc::ClientContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* Broker::Stub::PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::broker::BrokerResult, ::broker::Channel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* Broker::Stub::AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::broker::Channel& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Broker::Stub::GetChannels(::grpc::ClientContext* context, const ::broker::Empty& request, ::broker::ChannelNames* response) {
  return ::grpc::internal::BlockingUnaryCall< ::broker::Empty, ::broker::ChannelNames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChannels_, context, request, response);
}

void Broker::Stub::async::GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::broker::Empty, ::broker::ChannelNames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannels_, context, request, response, std::move(f));
}

void Broker::Stub::async::GetChannels(::grpc::ClientContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>* Broker::Stub::PrepareAsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::broker::ChannelNames, ::broker::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::broker::ChannelNames>* Broker::Stub::AsyncGetChannelsRaw(::grpc::ClientContext* context, const ::broker::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Broker::Stub::PublishMessage(::grpc::ClientContext* context, const ::broker::Message& request, ::broker::BrokerResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::broker::Message, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishMessage_, context, request, response);
}

void Broker::Stub::async::PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::broker::Message, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishMessage_, context, request, response, std::move(f));
}

void Broker::Stub::async::PublishMessage(::grpc::ClientContext* context, const ::broker::Message* request, ::broker::BrokerResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* Broker::Stub::PrepareAsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::broker::BrokerResult, ::broker::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::broker::BrokerResult>* Broker::Stub::AsyncPublishMessageRaw(::grpc::ClientContext* context, const ::broker::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::broker::Channel, ::broker::Message>* Broker::Stub::SubscribeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::broker::Channel, ::broker::Message>::Create(channel_.get(), rpcmethod_Subscribe_, context);
}

void Broker::Stub::async::Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::broker::Channel,::broker::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::broker::Channel,::broker::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>* Broker::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::broker::Channel, ::broker::Message>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::broker::Channel, ::broker::Message>* Broker::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::broker::Channel, ::broker::Message>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, false, nullptr);
}

Broker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Broker::Service, ::broker::Channel, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::broker::Channel* req,
             ::broker::BrokerResult* resp) {
               return service->CreateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Broker::Service, ::broker::Empty, ::broker::ChannelNames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::broker::Empty* req,
             ::broker::ChannelNames* resp) {
               return service->GetChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Broker::Service, ::broker::Message, ::broker::BrokerResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::broker::Message* req,
             ::broker::BrokerResult* resp) {
               return service->PublishMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Broker::Service, ::broker::Channel, ::broker::Message>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::broker::Message,
             ::broker::Channel>* stream) {
               return service->Subscribe(ctx, stream);
             }, this)));
}

Broker::Service::~Service() {
}

::grpc::Status Broker::Service::CreateChannel(::grpc::ServerContext* context, const ::broker::Channel* request, ::broker::BrokerResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Broker::Service::GetChannels(::grpc::ServerContext* context, const ::broker::Empty* request, ::broker::ChannelNames* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Broker::Service::PublishMessage(::grpc::ServerContext* context, const ::broker::Message* request, ::broker::BrokerResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Broker::Service::Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::broker::Message, ::broker::Channel>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace broker

